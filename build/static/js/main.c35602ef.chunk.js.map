{"version":3,"sources":["components/Post/Post.js","components/Home/Home.js","NoMatch/NoMatch.js","components/Profile/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","id","friend","Card","Header","Body","Button","variant","to","Home","useState","friends","setFriends","useEffect","fetch","then","res","json","data","length","map","NoMatch","Profile","friendId","useParams","setFriend","friendTwo","setFriendTwo","friendThree","setFriendThree","url","axios","urlTwo","dataTwo","urlThree","title","body","srcSet","src","alt","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wRAoBeA,EAhBF,SAACC,GAAW,IACbC,EAAOD,EAAME,OAAbD,GAGR,OACI,6BACI,kBAACE,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,oBAA0BH,GAC1B,kBAACE,EAAA,EAAKE,KAAN,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,QAAO,kBAAC,IAAD,CAAMC,GAAE,gBAAWP,IAAM,wBAAIM,QAAQ,cAAZ,kBCUrDE,EAnBF,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACRC,EADQ,KACCC,EADD,KASf,OANAC,qBAAU,WACRC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIN,EAAWM,QACxB,IAGC,6BACI,wCAAcP,EAAQQ,QAE1BR,EAAQS,KAAI,SAAAlB,GAAM,OAAG,kBAAC,EAAD,CAAMA,OAAQA,SCP5BmB,EARC,WACZ,OACI,6BACI,2C,iBC4CGC,EA7CC,WAAO,IACZC,EAAYC,cAAZD,SADW,EAEUb,mBAAS,IAFnB,mBAEXR,EAFW,KAEHuB,EAFG,OAGgBf,mBAAS,IAHzB,mBAGXgB,EAHW,KAGAC,EAHA,OAIoBjB,mBAAS,IAJ7B,mBAIXkB,EAJW,KAIEC,EAJF,KA+BlB,OA1BAhB,qBAAU,WACN,IAAMiB,EAAG,qDAAiDP,GAC1DQ,IAAMD,GACLf,MAAK,SAAAG,GAAI,OAAIO,EAAUP,EAAKA,WAC9B,CAACK,IAGJV,qBAAU,WACN,IAAMmB,EAAM,4DAAwDT,GACpEQ,IAAMC,GACLjB,MAAK,SAAAkB,GAEFN,EAAaM,EAAQf,WAG1B,CAACK,IAGJV,qBAAU,WACN,IAAMqB,EAAQ,sDAAkDX,GAChEQ,IAAMG,GACLnB,MAAK,SAAAmB,GACFL,EAAeK,EAAShB,WAG7B,CAACK,IAEA,6BACI,4BAAKrB,EAAOD,IACZ,sCAAYC,EAAOiC,OACvB,qCAAWjC,EAAOkC,MAClB,wCAAcV,EAAUU,MACxB,iCACA,4BAAQC,OAAQT,EAAYE,MAC5B,yBAAKQ,IAAKV,EAAYE,IAAKS,IAAKX,EAAYW,SCVrCC,MAtBf,WAEE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,mBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,UCdQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c35602ef.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Button } from 'react-bootstrap'\n\nconst Post = (props) => {\n    const { id } = props.friend;\n\n\n    return (\n        <div>\n            <Card>\n                <Card.Header>Total Post: {id}</Card.Header>\n                <Card.Body>\n                    <Button variant=\"info\"><Link to={`/Post/${id}`}><h3 variant=\"text-white\">See more</h3></Link></Button>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n};\n\nexport default Post;","import React, { useState, useEffect } from 'react';\nimport Post from '../Post/Post';\n\n\nconst Home = () => {\n    const [friends, setFriends] = useState([]);\n\n    useEffect(() => {\n      fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(res => res.json())\n      .then(data => setFriends(data))\n    }, [])\n\n    return (\n        <div>\n            <h1>Friends: {friends.length}</h1>\n      {\n        friends.map(friend =><Post friend={friend}></Post>)\n      }\n        </div>\n    );\n};\n\nexport default Home;","import React from 'react';\n\nconst NoMatch = () => {\n    return (\n        <div>\n            <h1>Wrong Url</h1>\n        </div>\n    );\n};\n\nexport default NoMatch;","import axios from 'axios';\nimport React, { useEffect, useState} from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Profile = () => {\n    const {friendId} = useParams();\n    const [friend, setFriend] = useState({});\n    const [friendTwo, setFriendTwo] = useState({});\n    const [friendThree, setFriendThree] = useState({});\n    useEffect(() =>{\n        const url = `https://jsonplaceholder.typicode.com/posts/${friendId}`;\n        axios(url)\n        .then(data => setFriend(data.data));\n    }, [friendId])\n\n\n    useEffect(() =>{\n        const urlTwo = `https://jsonplaceholder.typicode.com/posts?userId=${friendId}`;\n        axios(urlTwo)\n        .then(dataTwo =>{\n\n            setFriendTwo(dataTwo.data)\n        } );\n        \n    }, [friendId])\n\n    \n    useEffect(() =>{\n        const urlThree = `https://jsonplaceholder.typicode.com/photos/${friendId}`;\n        axios(urlThree)\n        .then(urlThree =>{\n            setFriendThree(urlThree.data)\n        } );\n        \n    }, [friendId])\n    return (\n        <div>\n            <h3>{friend.id}</h3>\n            <h4>Title: {friend.title}</h4>\n        <h5>Body: {friend.body}</h5>\n        <h5>Comment: {friendTwo.body}</h5>\n        <picture>\n        <source srcSet={friendThree.url} />\n        <img src={friendThree.url} alt={friendThree.alt} />\n      </picture>\n        </div>\n    );\n};\n\nexport default Profile;","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './components/Home/Home';\nimport NoMatch from './NoMatch/NoMatch';\nimport Profile from './components/Profile/Profile';\n\nfunction App() {\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/Home\">\n          <Home/>\n        </Route>\n        <Route path=\"/Post/:friendId\">\n          <Profile/>\n        </Route>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"*\">\n            <NoMatch />\n          </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}